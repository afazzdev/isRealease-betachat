{"ast":null,"code":"var _jsxFileName = \"/home/latif/faizi/react/mini-project/Copy-beta/src/containers/MainWindow/MainWindow.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport MainInput from './MainInput';\nimport MessageWindow from '../../components/MessageWindow';\nimport WindowTopBar from '../../components/WindowTopBar';\n\nclass MainWindow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: []\n    };\n    this.getOpenedMessage = this.getOpenedMessage.bind(this);\n    this.scrollToLastMessage = this.scrollToLastMessage.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.scrollToLastMessage();\n  }\n\n  getOpenedMessage() {\n    let listObject, customProperties;\n\n    switch (this.props.openedMessage.messageType) {\n      case 'message':\n        listObject = Object.assign({}, this.props.messages);\n\n        customProperties = item => ({\n          messageType: 'message'\n        });\n\n        break;\n\n      default:\n        listObject = {};\n    }\n\n    if (listObject.hasOwnProperty(\"\".concat(this.props.openedMessage.messageId)) && listObject[\"\".concat(this.props.openedMessage.messageId)].hasOwnProperty(\"\".concat(this.props.openedMessage.messageType, \"s\"))) {\n      let finalList = listObject[\"\".concat(this.props.openedMessage.messageId)][\"\".concat(this.props.openedMessage.messageType, \"s\")];\n      return finalList.map((item, index) => Object.assign({}, item, customProperties(item, index)));\n    } else return [];\n  }\n\n  scrollToLastMessage() {\n    this.messageWindow.scrollTop = this.messageWindow.scrollHeight;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-window__top-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(WindowTopBar, {\n      title: this.props.window.title,\n      meta: this.props.window.meta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: element => this.messageWindow = element,\n      className: \"main-window__message-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(MessageWindow, {\n      messages: this.getOpenedMessage(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(MainInput, {\n      wrappedComponentRef: mainInput => this.mainInput = mainInput,\n      activeMessages: this.getOpenedMessage(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(connect(state => ({\n  window: state.window,\n  messages: state.messages,\n  openedMessage: state.openedMessage\n}))(MainWindow));","map":{"version":3,"sources":["/home/latif/faizi/react/mini-project/Copy-beta/src/containers/MainWindow/MainWindow.js"],"names":["React","Component","connect","withRouter","MainInput","MessageWindow","WindowTopBar","MainWindow","constructor","props","state","messages","getOpenedMessage","bind","scrollToLastMessage","componentDidUpdate","listObject","customProperties","openedMessage","messageType","Object","assign","item","hasOwnProperty","messageId","finalList","map","index","messageWindow","scrollTop","scrollHeight","render","window","title","meta","element","mainInput"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport MainInput from './MainInput';\nimport MessageWindow from '../../components/MessageWindow';\nimport WindowTopBar from '../../components/WindowTopBar';\n\n\nclass MainWindow extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: []\n        }\n        this.getOpenedMessage = this.getOpenedMessage.bind(this);\n        this.scrollToLastMessage = this.scrollToLastMessage.bind(this);\n    }\n\n    \n    componentDidUpdate() {\n        this.scrollToLastMessage();\n    }\n    \n\n    getOpenedMessage() {\n        let listObject, customProperties;\n        switch (this.props.openedMessage.messageType) {\n            case 'message':\n                listObject = Object.assign({}, this.props.messages);\n                customProperties = (item) => ({\n                    messageType: 'message'\n                })\n                break;\n            default:\n                listObject = {};\n        }\n        if (listObject.hasOwnProperty(`${this.props.openedMessage.messageId}`) && listObject[`${this.props.openedMessage.messageId}`].hasOwnProperty(`${this.props.openedMessage.messageType}s`)) {\n            let finalList = listObject[`${this.props.openedMessage.messageId}`][`${this.props.openedMessage.messageType}s`];\n            return finalList.map((item, index) => Object.assign({}, item, customProperties(item, index)));\n        } else return []\n    }\n\n    scrollToLastMessage() {\n        this.messageWindow.scrollTop = this.messageWindow.scrollHeight;\n    }\n    render() {\n        return (\n            <div className=\"main-window\">\n                <div className=\"main-window__top-bar\">\n                   <WindowTopBar title={this.props.window.title} meta={this.props.window.meta} />\n                </div>\n                <div ref={element => this.messageWindow = element} className=\"main-window__message-window\">\n                    <MessageWindow  messages={this.getOpenedMessage()}/>\n                </div>\n                <MainInput wrappedComponentRef={mainInput => this.mainInput = mainInput} activeMessages={ this.getOpenedMessage()} />\n            </div>\n        )\n    }\n}\n\nexport default withRouter(connect(state => ({\n    window: state.window,\n    messages: state.messages,\n    openedMessage: state.openedMessage\n}))(MainWindow)); "]},"metadata":{},"sourceType":"module"}