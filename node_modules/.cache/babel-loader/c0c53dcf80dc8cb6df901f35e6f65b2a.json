{"ast":null,"code":"import _defineProperty from \"/home/latif/faizi/react/mini-project/Copy-beta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  messages: [{\n    id: 1,\n    chat: \"initial chat\"\n  }],\n  receiver2: [{\n    id: 1,\n    chat: \"initial chat 2\"\n  }]\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case \"INITIAL_CHAT\":\n      if (state.length === 0) {\n        return {\n          [action.name]: action.payload\n        };\n      } else {\n        return _objectSpread({}, state, {\n          [action.name]: {\n            name: \"name\".concat(action.data.no_detail_chat),\n            messages: action.data.chat,\n            sender: action.data.id_user_from,\n            receiver: action.data.id_user_to\n          }\n        });\n      }\n\n    case \"SEND_MESSAGE\":\n      if (state.messages.length === 0) {\n        return _objectSpread({}, state, {\n          [action.name]: [{\n            id: 1 + Math.random(),\n            chat: action.payload,\n            sender: action.sender\n          }]\n        });\n      } else {\n        return _objectSpread({}, state, {\n          [action.name]: [...state[action.name], {\n            id: 1 + Math.random(),\n            sender: action.sender,\n            chat: action.payload\n          }]\n        });\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/latif/faizi/react/mini-project/Copy-beta/src/redux/reducers/MessagesReducer.js"],"names":["initialState","messages","id","chat","receiver2","state","action","type","length","name","payload","data","no_detail_chat","sender","id_user_from","receiver","id_user_to","Math","random"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAAD,CADS;AAEnBC,EAAAA,SAAS,EAAE,CAAC;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAAD;AAFQ,CAArB;AAKA,gBAAe,CAACE,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAIF,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO;AAAE,WAACF,MAAM,CAACG,IAAR,GAAeH,MAAM,CAACI;AAAxB,SAAP;AACD,OAFD,MAEO;AACL,iCACKL,KADL;AAEE,WAACC,MAAM,CAACG,IAAR,GAAe;AACbA,YAAAA,IAAI,gBAASH,MAAM,CAACK,IAAP,CAAYC,cAArB,CADS;AAEbX,YAAAA,QAAQ,EAAEK,MAAM,CAACK,IAAP,CAAYR,IAFT;AAGbU,YAAAA,MAAM,EAAEP,MAAM,CAACK,IAAP,CAAYG,YAHP;AAIbC,YAAAA,QAAQ,EAAET,MAAM,CAACK,IAAP,CAAYK;AAJT;AAFjB;AASD;;AACH,SAAK,cAAL;AACE,UAAIX,KAAK,CAACJ,QAAN,CAAeO,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,iCACKH,KADL;AAEE,WAACC,MAAM,CAACG,IAAR,GAAe,CACb;AACEP,YAAAA,EAAE,EAAE,IAAIe,IAAI,CAACC,MAAL,EADV;AAEEf,YAAAA,IAAI,EAAEG,MAAM,CAACI,OAFf;AAGEG,YAAAA,MAAM,EAAEP,MAAM,CAACO;AAHjB,WADa;AAFjB;AAUD,OAXD,MAWO;AACL,iCACKR,KADL;AAEE,WAACC,MAAM,CAACG,IAAR,GAAe,CACb,GAAGJ,KAAK,CAACC,MAAM,CAACG,IAAR,CADK,EAEb;AACEP,YAAAA,EAAE,EAAE,IAAIe,IAAI,CAACC,MAAL,EADV;AAEEL,YAAAA,MAAM,EAAEP,MAAM,CAACO,MAFjB;AAGEV,YAAAA,IAAI,EAAEG,MAAM,CAACI;AAHf,WAFa;AAFjB;AAWD;;AAEH;AACE,aAAOL,KAAP;AA1CJ;AA4CD,CA7CD","sourcesContent":["const initialState = {\n  messages: [{ id: 1, chat: \"initial chat\" }],\n  receiver2: [{ id: 1, chat: \"initial chat 2\" }]\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \"INITIAL_CHAT\":\n      if (state.length === 0) {\n        return { [action.name]: action.payload };\n      } else {\n        return {\n          ...state,\n          [action.name]: {\n            name: `name${action.data.no_detail_chat}`,\n            messages: action.data.chat,\n            sender: action.data.id_user_from,\n            receiver: action.data.id_user_to\n          }\n        };\n      }\n    case \"SEND_MESSAGE\":\n      if (state.messages.length === 0) {\n        return {\n          ...state,\n          [action.name]: [\n            {\n              id: 1 + Math.random(),\n              chat: action.payload,\n              sender: action.sender\n            }\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          [action.name]: [\n            ...state[action.name],\n            {\n              id: 1 + Math.random(),\n              sender: action.sender,\n              chat: action.payload\n            }\n          ]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}